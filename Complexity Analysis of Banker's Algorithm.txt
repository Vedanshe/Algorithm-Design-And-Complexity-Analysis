Complexity Of Banker's Algorithm has been reduced from O(m^2n) to O(mn) 

Algorithm 1: Structure of whole algorithm/code

Step 1: START
Step 2: Make a class
        class ResourceManager 
 Step 2.1: Declare variables and functions
Step 3: Function1: bankers ----------------------------------------------------------------------------------O(n^2)
Step 4: Function2: input --------------------------------------------------------------------------------------O(mn)
Step 5: Function3: method ----------------------------------------------------------------------------------O(n^2)
Step 6: Function4: search ------------------------------------------------------------------------------------O(mn)
Step 7: Function5: display ----------------------------------------------------------------------------------O(n^2)
Step 8: Calling Functions in Main Function
Step 9: STOP
----------------------------------------------------------------------------------------------------------------------------------------
Time Complexity T(n): O(mn)    
Note: If both array have the same size, the time complexity is O(N^2) If both array have a different size, the time complexity is O(N.M) (as in N times M, where N and M are the array sizes)



Algorithm 2: For Function1: bankers

Step 1: Start
Step 2: Initializing variable k=0 (k: current resource), MAX = 20 ------------------------------1
Step 3: LOOP: for(int i=0;i<MAX;i++)   --------------------------------------------------------------n+1           
  Step 3.1: LOOP: for(int j=0;j<MAX;j++) -----------------------------------------------------------n (n+1)
                                  allocation=0 ----------------------------------------------------------------------n (n)
                                  maximum_need=0 -------------------------------------------------------------n (n)
                                  need=0 ----------------------------------------------------------------------------n (n)
                 END LOOP
                 available=0 ------------------------------------------------------------------------------------n
                 result=0 ----------------------------------------------------------------------------------------n
                 finish=0 ----------------------------------------------------------------------------------------n
          END LOOP
Step 4: Stop
------------------------------------------------------------------------------------------------------------------------------------
Time Complexity T(n) :  1+n+1+n(n+1)+n^2+n^2+n^2+3n = 4n^2 + 4n + 2 : O(n^2)



Algorithm 3: For Function2: input

Step 1: Start
Step 2: Initializing variables i,j  ------------------------------------------------------------------------------------1
Step 3: INPUT: No. of people  ----------------------------------------------------------------------------------1
            INPUT: No. of resources  ------------------------------------------------------------------------------1
            INPUT: Allocated resources  --------------------------------------------------------------------------1
Step 4: LOOP: for(i=0;i<nop;i++)   ------------------------------------------------------------------------------------n+1
                                 DISPLAY: Person  ------------------------------------------------------------------------------------n
                                 for(j=0;j<nor;j++)  ------------------------------------------------------------------------------------n (m+1)
                                       DISPLAY: Resource  ------------------------------------------------------------------------------------n (m)
Step 5: INPUT: Maximum resources  ------------------------------------------------------------------------------------1
Step 6: LOOP: for(i=0;i<nop;i++) -----------------------------------------------------------------------------------------n+1
                                 DISPLAY: Person ------------------------------------------------------------------------------------n
                                 for(j=0;j<nor;j++) ------------------------------------------------------------------------------------n (m+1) 
                                       DISPLAY: Resource ------------------------------------------------------------------------------------n (m)
                                       need=maximum_need - allocation ------------------------------------------------------------------ n (m)
Step 7: INPUT: Currently available resources ------------------------------------------------------------------------------------1
Step 8: LOOP: for(j=0;j<nor;j++) -----------------------------------------------------------------------------------------------m+1
                                 DISPLAY: Resource ------------------------------------------------------------------------------------m
                                 for(i=0;i<nop;i++) ------------------------------------------------------------------------------------m (n+1)
                                      finish[i]=0 ------------------------------------------------------------------------------------m (n)
Step 9: Stop
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity T(n): 7nm+6n+3m+9 : O(nm)



Algorithm 4: Function3: method -> To make method for safe sequence
 
Step 1: Start
Step 2: Intializing variables i=0,j,flag ------------------------------------------------------------------------------------1
Step 3: MAIN LOOP:
    while(1) ------------------------------------------------------------------------------------1
   
        if(finish[i]==0) ------------------------------------------------------------------------------------n 
        
            pnum =search(i) ------------------------------------------------------------------------------------n
            if(pnum!=-1) ------------------------------------------------------------------------------------n (n)
          
                result[k++] = i ------------------------------------------------------------------------------------n (n)
                finish[i] = 1------------------------------------------------------------------------------------n (n)
                for(j=0;j<nor;j++) ------------------------------------------------------------------------------------n (m+1)
                    available = available + allocated --------------------------------------------------------------m
        END IF
        i++;
        if(i==nop) ------------------------------------------------------------------------------------n
        
            flag=0 ------------------------------------------------------------------------------------n
            for(j=0;j<nor;j++) ------------------------------------------------------------------------------------n (m+1)
                if(avail[j]!=work[j]) ------------------------------------------------------------------------------------n (m)

            flag=1 ------------------------------------------------------------------------------------n
            for(j=0;j<nor;j++) ------------------------------------------------------------------------------------n (m+1)
                work[j]=avail[j] ------------------------------------------------------------------------------------n (m)

            if(flag==0) ------------------------------------------------------------------------------------n (n)
                break ------------------------------------------------------------------------------------n (n)
            else ------------------------------------------------------------------------------------n (n)
                i=0 ------------------------------------------------------------------------------------n (n)
Step 4: Stop
------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity T(n): 7n^2+5nm+8n+m+2 : O(n^2)



Algorithm 5: For Function4: search

Step 1: Start
Step 2: Intializing variable j -------------------------------------------------------------------1
Step 3: LOOP: for(j=0;j<nor;j++) ------------------------------------------------------------m+1
   Step 3.1: LOOP: if(need>available) -------------------------------------------------------m (n)
                                  RETURN -1 -----------------------------------------------------------m (n)
RETURN 0
Step 4: Stop
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity T(n): 2mn+m+2 : O(mn)



Algorithm 6: For Function5: display

Step 1: Start
Step 2: Intializing variables i, j --------------------------------------------------------------------------1
Step 3: LOOP: for(j=0;j<nop;j++) ----------------------------------------------------------------------n+1
   Step 3.1: LOOP: for(j=0;j<nor;j++) ------------------------------------------------------------ n (m+1)
                   DISPLAY: allocation ------------------------------------------------------------n (m)
                   DISPLAY: maximum_need ------------------------------------------------------------n (m)
                   DISPLAY: need ------------------------------------------------------------n (m)
Step 4: DISPLAY: Safe Sequence -------------------------------------------------------------------1
    Step 4.1: LOOP: for(i=0;i<k;i++) -----------------------------------------------------------------m+1
                                     temp = result[i]+1 ------------------------------------------------------------m
Step 5: DISPLAY: Unsafe Sequence ------------------------------------------------------------1
    Step 5.1: flg=0 ------------------------------------------------------------1
    Step 5.2: LOOP: for(i=0;i<nop;i++) ------------------------------------------------------------n+1
            Step 5.2.1: LOOP: if(finish[i]==0) ------------------------------------------------------------n(n)
                                              flg=1 ------------------------------------------------------------n(n)
Step 6: LOOP: if(flg==1) ------------------------------------------------------------n
                           DISPLAY: Safe state ------------------------------------------------------------n
                        else ---------------------------------------------------------------------n
                           DISPLAY: Unsafe state ------------------------------------------------------------n
Step 7: Stop
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity T(n): 2n^2+4nm+7n+2m+7 : O(n^2)

